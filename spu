#!/bin/bash

# TODO: Reduce git fetch depth
# TODO: Does baseline updating work as intended?

set -euo pipefail

RED='\033[0;31m'
NC='\033[0m'

# Function to display usage
usage() {
    cat << EOF
Usage: ./spu [-s|--update-spu]
       ./spu [-b|--update-baseline] [-o|--offline] [-v|--verify] [(<path to manuals.txt> <path to versions.txt>)]
       ./spu [-i|--init]
EOF
    exit 1
}

error_exit() {
    echo -e "${RED}$1${NC}" >&2
    exit 1
}

# Check for required commands
for cmd in git grep cut; do
    command -v "$cmd" >/dev/null 2>&1 || error_exit "$cmd is required but not installed."
done

update_spu() {
    echo "Pulling SPU from remote repository..."
    if ! git pull origin main; then
        error_exit "Failed to update SPU. Please check your network connection and try again."
    fi
    echo "SPU updated successfully."
    exit 0
}

init_baseline() {
    if [ -d "baseline" ]; then
        error_exit "baseline directory already exists."
    fi
    if [ ! -f "init_url.txt" ]; then
        error_exit "Init file init_url.txt does not exist."
    fi
    echo "Cloning baseline..."
    if ! git clone "$(head -n 1 "init_url.txt")" baseline; then
        error_exit "Failed to clone baseline. Check your internet connection."
    fi
    exit 0
}

# Check to make sure spu is run from the root of the SPU repository
if [ "$0" != "./spu" ]; then
    error_exit "Please run SPU from the root of the SPU repository (./spu)"
fi

# Initialize variables
UPDATE_BASELINE=false
OFFLINE=false
VERIFY=false
MANUALS_FILE="baseline/manuals.txt"
VERSIONS_FILE="baseline/versions.txt"

# Parse options
while [[ "${1:-}" =~ ^- && ! "${1:-}" == "--" ]]; do case $1 in
  -s | --update-spu )
    update_spu
    ;;
  -i | --init )
    init_baseline
    ;;
  -b | --update-baseline )
    UPDATE_BASELINE=true
    ;;
  -o | --offline )
    OFFLINE=true
    ;;
  -v | --verify )
    VERIFY=true
    ;;
  * )
    usage
    ;;
esac; shift; done
if [[ "${1:-}" == '--' ]]; then shift; fi

# Parse manuals and versions arguments
if [ $# -eq 2 ]; then
    MANUALS_FILE="$1"
    VERSIONS_FILE="$2"
elif [ $# -ne 0 ]; then
    usage
fi

# Check for baseline update option
if [[ "$UPDATE_BASELINE" == true && "$OFFLINE" == false ]]; then
    echo "Updating baseline..."
    BASELINE_URL=$(grep "^baseline .*$" "$MANUALS_FILE" | cut -d' ' -f2)
    cd baseline || error_exit "Failed to enter baseline directory."
    git checkout -f main || error_exit "Failed to checkout main in baseline."
    # TODO: Check to see if the URL has changed. Likely need to clone if so, or limit migration.
    git remote set-url origin "$BASELINE_URL" || error_exit "Failed to set baseline remote URL."
    if ! git pull origin main; then
        cd ..
        error_exit "Failed to update baseline. Please check your network connection and try again."
    fi
    cd ..
fi

# Verify that both manuals and versions exist
[ -f "$MANUALS_FILE" ] || error_exit "Manuals file not found: $MANUALS_FILE"
[ -f "$VERSIONS_FILE" ] || error_exit "Versions file not found: $VERSIONS_FILE"

echo "Updating manuals using manuals: $MANUALS_FILE with versions: $VERSIONS_FILE"
echo

# Creates the pubs directory
PUBS_DIR="pubs"
mkdir -p "$PUBS_DIR"

# List out all of the manuals to download
PUBS=$(cut -d' ' -f1 "$VERSIONS_FILE")

# Update each manual
for PUB in $PUBS; do
    # Get the desired version and URL for the manual
    VERSION=$(grep "^$PUB .*$" "$VERSIONS_FILE" | cut -d' ' -f2)
    REPO_URL=$(grep "^$PUB .*$" "$MANUALS_FILE" | cut -d' ' -f2)
    if [ -z "$REPO_URL" ]; then
        echo -e "${RED}No URL found for ${PUB}${NC}"
        echo
        continue
    fi

    if [ "$OFFLINE" == false ]; then
        if [ -d "$PUBS_DIR/$PUB" ]; then
            # Directory exists, fetch changes and checkout the desired version
            # TODO: Perform similar URL change/check that baseline performs?
            echo "Updating $PUBS_DIR/$PUB"
            cd "$PUBS_DIR/$PUB" || { echo -e "${RED}Failed to enter $PUBS_DIR/$PUB${NC}"; continue; }
            git checkout -f main || { echo -e "${RED}Failed to checkout main for $PUB${NC}"; cd ../..; continue; }
            git fetch -f --tags || { echo -e "${RED}Failed to fetch tags for $PUB${NC}"; cd ../..; continue; }
            git pull origin main || { echo -e "${RED}Failed to pull for $PUB${NC}"; cd ../..; continue; }
            cd ../..
        else
            # Directory does not exist, clone the repo
            echo "Cloning $PUB"
            if ! git clone "$REPO_URL" "$PUBS_DIR/$PUB"; then
                echo -e "${RED}Failed to clone $PUB${NC}"
                echo
                continue
            fi
        fi
    else
        echo "Skipping online update for $PUB"
    fi

    # Verify the directory exists
    if [ ! -d "$PUBS_DIR/$PUB" ]; then
        echo -e "${RED}Directory for $PUB does not exist${NC}"
        echo
        continue
    fi

    cd "$PUBS_DIR/$PUB" || { echo -e "${RED}Failed to enter $PUBS_DIR/$PUB${NC}"; continue; }
    if [ -z "$(git tag --list "$VERSION")" ]; then
        # No version specified, use the latest
        echo -e "${RED}No version $VERSION found for ${PUB}, using most recent commit${NC}"
    else
        # Checkout the desired version
        echo "Using version $VERSION for $PUB"
        git config advice.detachedHead false
        git checkout -f "$VERSION" || echo -e "${RED}Failed to checkout $VERSION for $PUB${NC}"
    fi
    cd ../..
    echo
done

# Verify the versions of all downloaded manuals
if [ "$VERIFY" == true ]; then
    echo "Verifying versions..."
    echo ""
    cd "$PUBS_DIR" || error_exit "Failed to enter $PUBS_DIR"
    for PUB in $PUBS; do
        cd "$PUB" || { echo -e "${RED}Failed to enter $PUB${NC}"; cd ..; continue; }
        echo "$PUB"
        git log --oneline --decorate -n 1 HEAD || echo -e "${RED}Failed to get log for $PUB${NC}"
        cd ..
    done
    cd ..
fi
